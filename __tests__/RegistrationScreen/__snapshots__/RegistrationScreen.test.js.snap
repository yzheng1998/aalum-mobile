// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RegistrationScreen renders children properly 1`] = `
<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "black": "#4F4F4F",
        "border": "#BDBDBD",
        "buttonShadow1": "rgba(255, 255, 255, 0) ",
        "buttonShadow2": "rgba(249, 249, 249, 0.9)",
        "charcoal": "#333333",
        "darkGrey": "#8F8F8F",
        "darkShadow": "rgba(0,0,0,0.1)",
        "darkerGrey": "#828282",
        "error": "#DA2752",
        "gradientLeft": "#DA2752",
        "gradientRight": "#E935F8",
        "green": "#219653",
        "grey": "#A8A8A8",
        "inactiveText": "#ADADAD",
        "lightGrey": "#A0A0A0",
        "lightShadow": "rgba(0,0,0,0.16)",
        "offWhite": "#F9F9F9",
        "pureBlack": "#000000",
        "shadow": "rgba(0, 0, 0, 0.15)",
        "white": "#FFFFFF",
        "whiteGrey": "#E0E0E0",
      },
      "fonts": Object {
        "bodyText": "Avenir-Medium",
        "heading": "Montserrat-Bold",
        "title": "Avenir-Heavy",
      },
    }
  }
>
  <RegistrationScreen>
    <Styled(SafeAreaView)>
      <StyledNativeComponent
        forwardedClass={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "displayName": "Styled(SafeAreaView)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
  flex: 1;
  background-color: ",
                "#F9F9F9",
                ";
",
              ],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
            Symbol(Symbol.hasInstance): [Function],
          }
        }
        forwardedRef={null}
      >
        <SafeAreaView
          style={
            Array [
              Object {
                "backgroundColor": "#F9F9F9",
                "flexBasis": 0,
                "flexGrow": 1,
                "flexShrink": 1,
              },
            ]
          }
        >
          <_class
            style={
              Array [
                Object {
                  "backgroundColor": "#F9F9F9",
                  "flexBasis": 0,
                  "flexGrow": 1,
                  "flexShrink": 1,
                },
              ]
            }
          >
            <RCTSafeAreaView
              style={
                Array [
                  Object {
                    "backgroundColor": "#F9F9F9",
                    "flexBasis": 0,
                    "flexGrow": 1,
                    "flexShrink": 1,
                  },
                ]
              }
            >
              <Styled(ScrollView)
                alwaysBounceVertical={false}
                keyboardShouldPersistTaps="handled"
                scrollEnabled={false}
              >
                <StyledNativeComponent
                  alwaysBounceVertical={false}
                  forwardedClass={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "alwaysBounceVertical": false,
                            "children": Array [
                              <StatusBar
                                animated={false}
                                hidden={true}
                                showHideTransition="fade"
                              />,
                              undefined,
                              undefined,
                              <ForwardRef />,
                              undefined,
                              undefined,
                              <ForwardRef />,
                            ],
                            "keyboardShouldPersistTaps": "handled",
                            "scrollEnabled": false,
                            "style": Array [
                              Object {
                                "flexBasis": 0,
                                "flexGrow": 1,
                                "flexShrink": 1,
                              },
                            ],
                          },
                          Object {},
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  forwardedRef={null}
                  keyboardShouldPersistTaps="handled"
                  scrollEnabled={false}
                >
                  <ScrollView
                    alwaysBounceVertical={false}
                    keyboardShouldPersistTaps="handled"
                    scrollEnabled={false}
                    style={
                      Array [
                        Object {
                          "flexBasis": 0,
                          "flexGrow": 1,
                          "flexShrink": 1,
                        },
                      ]
                    }
                  >
                    <_class
                      alwaysBounceVertical={false}
                      keyboardShouldPersistTaps="handled"
                      scrollEnabled={false}
                      style={
                        Array [
                          Object {
                            "flexBasis": 0,
                            "flexGrow": 1,
                            "flexShrink": 1,
                          },
                        ]
                      }
                    >
                      <RCTScrollView
                        alwaysBounceVertical={false}
                        keyboardShouldPersistTaps="handled"
                        scrollEnabled={false}
                        style={
                          Array [
                            Object {
                              "flexBasis": 0,
                              "flexGrow": 1,
                              "flexShrink": 1,
                            },
                          ]
                        }
                      >
                        <View>
                          <View>
                            <StatusBar
                              animated={false}
                              hidden={true}
                              showHideTransition="fade"
                            />
                            <Styled(Component)>
                              <StyledNativeComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "displayName": "Styled(Component)",
                                    "getSize": [Function],
                                    "inlineStyle": InlineStyle {
                                      "rules": Array [],
                                    },
                                    "prefetch": [Function],
                                    "propTypes": Object {
                                      "accessibilityLabel": [Function],
                                      "accessible": [Function],
                                      "blurRadius": [Function],
                                      "capInsets": [Function],
                                      "defaultSource": [Function],
                                      "onError": [Function],
                                      "onLayout": [Function],
                                      "onLoad": [Function],
                                      "onLoadEnd": [Function],
                                      "onLoadStart": [Function],
                                      "onPartialLoad": [Function],
                                      "onProgress": [Function],
                                      "resizeMethod": [Function],
                                      "resizeMode": [Function],
                                      "source": [Function],
                                      "style": [Function],
                                      "testID": [Function],
                                    },
                                    "render": [Function],
                                    "resolveAssetSource": [Function],
                                    "styledComponentId": "StyledNativeComponent",
                                    "target": [Function],
                                    "withComponent": [Function],
                                    Symbol(Symbol.hasInstance): [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <Component
                                  style={
                                    Array [
                                      Object {},
                                    ]
                                  }
                                >
                                  <Image
                                    style={
                                      Array [
                                        Object {},
                                      ]
                                    }
                                  />
                                </Component>
                              </StyledNativeComponent>
                            </Styled(Component)>
                            <MockChild>
                              <StyledNativeComponent
                                forwardedClass={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "displayName": "MockChild",
                                    "inlineStyle": InlineStyle {
                                      "rules": Array [],
                                    },
                                    "render": [Function],
                                    "styledComponentId": "StyledNativeComponent",
                                    "target": [Function],
                                    "withComponent": [Function],
                                    Symbol(Symbol.hasInstance): [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <View
                                  style={
                                    Array [
                                      Object {},
                                    ]
                                  }
                                >
                                  <View
                                    style={
                                      Array [
                                        Object {},
                                      ]
                                    }
                                  />
                                </View>
                              </StyledNativeComponent>
                            </MockChild>
                          </View>
                        </View>
                      </RCTScrollView>
                    </_class>
                  </ScrollView>
                </StyledNativeComponent>
              </Styled(ScrollView)>
            </RCTSafeAreaView>
          </_class>
        </SafeAreaView>
      </StyledNativeComponent>
    </Styled(SafeAreaView)>
  </RegistrationScreen>
</ThemeProvider>
`;

exports[`RegistrationScreen renders correctly 1`] = `
<Styled(SafeAreaView)>
  <Styled(ScrollView)
    alwaysBounceVertical={false}
    keyboardShouldPersistTaps="handled"
    scrollEnabled={false}
  >
    <StatusBar
      animated={false}
      hidden={true}
      showHideTransition="fade"
    />
    <Styled(Component) />
  </Styled(ScrollView)>
</Styled(SafeAreaView)>
`;

exports[`RegistrationScreen renders correctly 2`] = `
<Styled(SafeAreaView)>
  <Styled(ScrollView)
    alwaysBounceVertical={false}
    keyboardShouldPersistTaps="handled"
    scrollEnabled={true}
  >
    <StatusBar
      animated={false}
      hidden={true}
      showHideTransition="fade"
    />
    <ProgressBar
      progress={0.7}
    />
    <Styled(View)>
      <BackButton
        color="#ADADAD"
        onPress={[Function]}
      />
    </Styled(View)>
    <Styled(Component) />
    <Styled(Text)>
      title
    </Styled(Text)>
    <Styled(Text)>
      subtitle
    </Styled(Text)>
  </Styled(ScrollView)>
</Styled(SafeAreaView)>
`;
