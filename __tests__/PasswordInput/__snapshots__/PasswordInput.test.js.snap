// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PasswordInput renders correctly 1`] = `
<ThemeProvider
  theme={
    Object {
      "colors": Object {
        "black": "#4F4F4F",
        "border": "#BDBDBD",
        "buttonShadow1": "rgba(255, 255, 255, 0) ",
        "buttonShadow2": "rgba(249, 249, 249, 0.9)",
        "charcoal": "#333333",
        "darkGrey": "#8F8F8F",
        "darkShadow": "rgba(0,0,0,0.1)",
        "darkerGrey": "#828282",
        "error": "#DA2752",
        "gradientLeft": "#DA2752",
        "gradientRight": "#E935F8",
        "green": "#219653",
        "grey": "#A8A8A8",
        "inactiveText": "#ADADAD",
        "lightGrey": "#A0A0A0",
        "lightShadow": "rgba(0,0,0,0.16)",
        "offWhite": "#F9F9F9",
        "pureBlack": "#000000",
        "shadow": "rgba(0, 0, 0, 0.15)",
        "white": "#FFFFFF",
        "whiteGrey": "#E0E0E0",
      },
      "fonts": Object {
        "bodyText": "Avenir-Medium",
        "heading": "Montserrat-Bold",
        "title": "Avenir-Heavy",
      },
    }
  }
>
  <PasswordInput>
    <PrimaryInput
      icon={
        <ForwardRef
          onPress={[Function]}
          touchSlop={
            Object {
              "bottom": 5,
              "left": 5,
              "right": 5,
              "top": 5,
            }
          }
        >
          <Icon
            allowFontScaling={false}
            color="#4F4F4F"
            name="eye"
            size={20}
            style={
              Object {
                "marginRight": 2,
                "marginTop": 2,
              }
            }
          />
        </ForwardRef>
      }
      placeholder="Password"
      secureTextEntry={true}
    >
      <Styled(TouchableOpacity)
        activeOpacity={1}
        onPress={[Function]}
      >
        <StyledNativeComponent
          activeOpacity={1}
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "displayName": "Styled(TouchableOpacity)",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  margin-left: 32px;
  margin-right: 32px;
  padding-top: 8px;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          onPress={[Function]}
        >
          <TouchableOpacity
            activeOpacity={1}
            onPress={[Function]}
            style={
              Array [
                Object {
                  "marginLeft": 32,
                  "marginRight": 32,
                  "paddingTop": 8,
                },
              ]
            }
          >
            <AnimatedComponent
              accessible={true}
              isTVSelectable={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Array [
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "paddingTop": 8,
                    },
                  ],
                  Object {
                    "opacity": 1,
                  },
                ]
              }
            >
              <View
                accessible={true}
                isTVSelectable={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "marginLeft": 32,
                    "marginRight": 32,
                    "opacity": 1,
                    "paddingTop": 8,
                  }
                }
              >
                <View
                  accessible={true}
                  isTVSelectable={true}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "opacity": 1,
                      "paddingTop": 8,
                    }
                  }
                >
                  <RoundContainer>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "RoundContainer",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  border-width: ",
                              [Function],
                              ";
  height: 45px;
  border-radius: 30px;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ",
                              "8px 16px 8px 16px",
                              ";
  border-color: ",
                              [Function],
                              ";
  background-color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "alignItems": "center",
                              "backgroundColor": "#FFFFFF",
                              "borderColor": "#A8A8A8",
                              "borderRadius": 30,
                              "borderWidth": 1.5,
                              "flexDirection": "row",
                              "height": 45,
                              "justifyContent": "space-between",
                              "paddingBottom": 8,
                              "paddingLeft": 16,
                              "paddingRight": 16,
                              "paddingTop": 8,
                            },
                          ]
                        }
                      >
                        <View
                          style={
                            Array [
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "#FFFFFF",
                                "borderColor": "#A8A8A8",
                                "borderRadius": 30,
                                "borderWidth": 1.5,
                                "flexDirection": "row",
                                "height": 45,
                                "justifyContent": "space-between",
                                "paddingBottom": 8,
                                "paddingLeft": 16,
                                "paddingRight": 16,
                                "paddingTop": 8,
                              },
                            ]
                          }
                        >
                          <Styled(TextInput)
                            autoCapitalize="none"
                            autoCorrect={false}
                            icon={
                              <ForwardRef
                                onPress={[Function]}
                                touchSlop={
                                  Object {
                                    "bottom": 5,
                                    "left": 5,
                                    "right": 5,
                                    "top": 5,
                                  }
                                }
                              >
                                <Icon
                                  allowFontScaling={false}
                                  color="#4F4F4F"
                                  name="eye"
                                  size={20}
                                  style={
                                    Object {
                                      "marginRight": 2,
                                      "marginTop": 2,
                                    }
                                  }
                                />
                              </ForwardRef>
                            }
                            placeholder="Password"
                            secureTextEntry={true}
                          >
                            <StyledNativeComponent
                              autoCapitalize="none"
                              autoCorrect={false}
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "State": Object {
                                    "blurTextInput": [Function],
                                    "currentlyFocusedField": [Function],
                                    "focusTextInput": [Function],
                                  },
                                  "attrs": Array [],
                                  "displayName": "Styled(TextInput)",
                                  "getDefaultProps": [Function],
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  width: ",
                                      [Function],
                                      ";
  font-size: 14px;
  font-family: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              icon={
                                <ForwardRef
                                  onPress={[Function]}
                                  touchSlop={
                                    Object {
                                      "bottom": 5,
                                      "left": 5,
                                      "right": 5,
                                      "top": 5,
                                    }
                                  }
                                >
                                  <Icon
                                    allowFontScaling={false}
                                    color="#4F4F4F"
                                    name="eye"
                                    size={20}
                                    style={
                                      Object {
                                        "marginRight": 2,
                                        "marginTop": 2,
                                      }
                                    }
                                  />
                                </ForwardRef>
                              }
                              placeholder="Password"
                              secureTextEntry={true}
                            >
                              <TextInput
                                allowFontScaling={true}
                                autoCapitalize="none"
                                autoCorrect={false}
                                icon={
                                  <ForwardRef
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <Icon
                                      allowFontScaling={false}
                                      color="#4F4F4F"
                                      name="eye"
                                      size={20}
                                      style={
                                        Object {
                                          "marginRight": 2,
                                          "marginTop": 2,
                                        }
                                      }
                                    />
                                  </ForwardRef>
                                }
                                placeholder="Password"
                                secureTextEntry={true}
                                style={
                                  Array [
                                    Object {
                                      "color": "#333333",
                                      "fontFamily": "Avenir-Medium",
                                      "fontSize": 14,
                                      "width": "90%",
                                    },
                                  ]
                                }
                                underlineColorAndroid="transparent"
                              >
                                <TextInput
                                  allowFontScaling={true}
                                  autoCapitalize="none"
                                  autoCorrect={false}
                                  icon={
                                    <ForwardRef
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <Icon
                                        allowFontScaling={false}
                                        color="#4F4F4F"
                                        name="eye"
                                        size={20}
                                        style={
                                          Object {
                                            "marginRight": 2,
                                            "marginTop": 2,
                                          }
                                        }
                                      />
                                    </ForwardRef>
                                  }
                                  placeholder="Password"
                                  secureTextEntry={true}
                                  style={
                                    Array [
                                      Object {
                                        "color": "#333333",
                                        "fontFamily": "Avenir-Medium",
                                        "fontSize": 14,
                                        "width": "90%",
                                      },
                                    ]
                                  }
                                  underlineColorAndroid="transparent"
                                />
                              </TextInput>
                            </StyledNativeComponent>
                          </Styled(TextInput)>
                          <Styled(View)>
                            <StyledNativeComponent
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "displayName": "Styled(View)",
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  align-items: center;
  justify-content: center;
  padding-bottom: 1.5px;
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "justifyContent": "center",
                                      "paddingBottom": 1.5,
                                    },
                                  ]
                                }
                              >
                                <View
                                  style={
                                    Array [
                                      Object {
                                        "alignItems": "center",
                                        "justifyContent": "center",
                                        "paddingBottom": 1.5,
                                      },
                                    ]
                                  }
                                >
                                  <SecurityToggle
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <StyledNativeComponent
                                      forwardedClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "displayName": "SecurityToggle",
                                          "getDefaultProps": [Function],
                                          "inlineStyle": InlineStyle {
                                            "rules": Array [],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "StyledNativeComponent",
                                          "target": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <TouchableOpacity
                                        activeOpacity={0.2}
                                        onPress={[Function]}
                                        style={
                                          Array [
                                            Object {},
                                          ]
                                        }
                                        touchSlop={
                                          Object {
                                            "bottom": 5,
                                            "left": 5,
                                            "right": 5,
                                            "top": 5,
                                          }
                                        }
                                      >
                                        <AnimatedComponent
                                          accessible={true}
                                          isTVSelectable={true}
                                          onResponderGrant={[Function]}
                                          onResponderMove={[Function]}
                                          onResponderRelease={[Function]}
                                          onResponderTerminate={[Function]}
                                          onResponderTerminationRequest={[Function]}
                                          onStartShouldSetResponder={[Function]}
                                          style={
                                            Array [
                                              Array [
                                                Object {},
                                              ],
                                              Object {
                                                "opacity": 1,
                                              },
                                            ]
                                          }
                                        >
                                          <View
                                            accessible={true}
                                            isTVSelectable={true}
                                            onResponderGrant={[Function]}
                                            onResponderMove={[Function]}
                                            onResponderRelease={[Function]}
                                            onResponderTerminate={[Function]}
                                            onResponderTerminationRequest={[Function]}
                                            onStartShouldSetResponder={[Function]}
                                            style={
                                              Object {
                                                "opacity": 1,
                                              }
                                            }
                                          >
                                            <View
                                              accessible={true}
                                              isTVSelectable={true}
                                              onResponderGrant={[Function]}
                                              onResponderMove={[Function]}
                                              onResponderRelease={[Function]}
                                              onResponderTerminate={[Function]}
                                              onResponderTerminationRequest={[Function]}
                                              onStartShouldSetResponder={[Function]}
                                              style={
                                                Object {
                                                  "opacity": 1,
                                                }
                                              }
                                            >
                                              <Icon
                                                allowFontScaling={false}
                                                color="#4F4F4F"
                                                name="eye"
                                                size={20}
                                                style={
                                                  Object {
                                                    "marginRight": 2,
                                                    "marginTop": 2,
                                                  }
                                                }
                                              >
                                                <Text
                                                  allowFontScaling={false}
                                                  style={
                                                    Array [
                                                      Object {
                                                        "color": "#4F4F4F",
                                                        "fontSize": 20,
                                                      },
                                                      Object {
                                                        "marginRight": 2,
                                                        "marginTop": 2,
                                                      },
                                                      Object {
                                                        "fontFamily": "Entypo",
                                                        "fontStyle": "normal",
                                                        "fontWeight": "normal",
                                                      },
                                                      Object {},
                                                    ]
                                                  }
                                                >
                                                  <Text
                                                    allowFontScaling={false}
                                                    style={
                                                      Array [
                                                        Object {
                                                          "color": "#4F4F4F",
                                                          "fontSize": 20,
                                                        },
                                                        Object {
                                                          "marginRight": 2,
                                                          "marginTop": 2,
                                                        },
                                                        Object {
                                                          "fontFamily": "Entypo",
                                                          "fontStyle": "normal",
                                                          "fontWeight": "normal",
                                                        },
                                                        Object {},
                                                      ]
                                                    }
                                                  >
                                                    
                                                  </Text>
                                                </Text>
                                              </Icon>
                                            </View>
                                          </View>
                                        </AnimatedComponent>
                                      </TouchableOpacity>
                                    </StyledNativeComponent>
                                  </SecurityToggle>
                                </View>
                              </View>
                            </StyledNativeComponent>
                          </Styled(View)>
                        </View>
                      </View>
                    </StyledNativeComponent>
                  </RoundContainer>
                  <Styled(Text)>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "Styled(Text)",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  margin-top: 5px;
  margin-left: 10px;
  color: ",
                              [Function],
                              ";
  font-family: ",
                              [Function],
                              ";
  font-size: 13px;
  line-height: 18px;
",
                            ],
                          },
                          "propTypes": Object {
                            "accessible": [Function],
                            "adjustsFontSizeToFit": [Function],
                            "allowFontScaling": [Function],
                            "disabled": [Function],
                            "ellipsizeMode": [Function],
                            "minimumFontScale": [Function],
                            "nativeID": [Function],
                            "numberOfLines": [Function],
                            "onLayout": [Function],
                            "onLongPress": [Function],
                            "onPress": [Function],
                            "pressRetentionOffset": [Function],
                            "selectable": [Function],
                            "selectionColor": [Function],
                            "style": [Function],
                            "suppressHighlighting": [Function],
                            "testID": [Function],
                            "textBreakStrategy": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <Text
                        style={
                          Array [
                            Object {
                              "color": "#DA2752",
                              "fontFamily": "Avenir-Heavy",
                              "fontSize": 13,
                              "lineHeight": 18,
                              "marginLeft": 10,
                              "marginTop": 5,
                            },
                          ]
                        }
                      >
                        <Text
                          style={
                            Array [
                              Object {
                                "color": "#DA2752",
                                "fontFamily": "Avenir-Heavy",
                                "fontSize": 13,
                                "lineHeight": 18,
                                "marginLeft": 10,
                                "marginTop": 5,
                              },
                            ]
                          }
                        />
                      </Text>
                    </StyledNativeComponent>
                  </Styled(Text)>
                </View>
              </View>
            </AnimatedComponent>
          </TouchableOpacity>
        </StyledNativeComponent>
      </Styled(TouchableOpacity)>
    </PrimaryInput>
  </PasswordInput>
</ThemeProvider>
`;

exports[`PasswordInput renders correctly 2`] = `
<ThemeProvider
  autoFocus={true}
  error="error"
  placeholder="placeholder"
  returnKeyType="done"
  theme={
    Object {
      "colors": Object {
        "black": "#4F4F4F",
        "border": "#BDBDBD",
        "buttonShadow1": "rgba(255, 255, 255, 0) ",
        "buttonShadow2": "rgba(249, 249, 249, 0.9)",
        "charcoal": "#333333",
        "darkGrey": "#8F8F8F",
        "darkShadow": "rgba(0,0,0,0.1)",
        "darkerGrey": "#828282",
        "error": "#DA2752",
        "gradientLeft": "#DA2752",
        "gradientRight": "#E935F8",
        "green": "#219653",
        "grey": "#A8A8A8",
        "inactiveText": "#ADADAD",
        "lightGrey": "#A0A0A0",
        "lightShadow": "rgba(0,0,0,0.16)",
        "offWhite": "#F9F9F9",
        "pureBlack": "#000000",
        "shadow": "rgba(0, 0, 0, 0.15)",
        "white": "#FFFFFF",
        "whiteGrey": "#E0E0E0",
      },
      "fonts": Object {
        "bodyText": "Avenir-Medium",
        "heading": "Montserrat-Bold",
        "title": "Avenir-Heavy",
      },
    }
  }
>
  <PasswordInput>
    <PrimaryInput
      icon={
        <ForwardRef
          onPress={[Function]}
          touchSlop={
            Object {
              "bottom": 5,
              "left": 5,
              "right": 5,
              "top": 5,
            }
          }
        >
          <Icon
            allowFontScaling={false}
            color="#4F4F4F"
            name="eye"
            size={20}
            style={
              Object {
                "marginRight": 2,
                "marginTop": 2,
              }
            }
          />
        </ForwardRef>
      }
      placeholder="Password"
      secureTextEntry={true}
    >
      <Styled(TouchableOpacity)
        activeOpacity={1}
        onPress={[Function]}
      >
        <StyledNativeComponent
          activeOpacity={1}
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "displayName": "Styled(TouchableOpacity)",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  margin-left: 32px;
  margin-right: 32px;
  padding-top: 8px;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          onPress={[Function]}
        >
          <TouchableOpacity
            activeOpacity={1}
            onPress={[Function]}
            style={
              Array [
                Object {
                  "marginLeft": 32,
                  "marginRight": 32,
                  "paddingTop": 8,
                },
              ]
            }
          >
            <AnimatedComponent
              accessible={true}
              isTVSelectable={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Array [
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "paddingTop": 8,
                    },
                  ],
                  Object {
                    "opacity": 1,
                  },
                ]
              }
            >
              <View
                accessible={true}
                isTVSelectable={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "marginLeft": 32,
                    "marginRight": 32,
                    "opacity": 1,
                    "paddingTop": 8,
                  }
                }
              >
                <View
                  accessible={true}
                  isTVSelectable={true}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "opacity": 1,
                      "paddingTop": 8,
                    }
                  }
                >
                  <RoundContainer>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "RoundContainer",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  border-width: ",
                              [Function],
                              ";
  height: 45px;
  border-radius: 30px;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ",
                              "8px 16px 8px 16px",
                              ";
  border-color: ",
                              [Function],
                              ";
  background-color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "alignItems": "center",
                              "backgroundColor": "#FFFFFF",
                              "borderColor": "#A8A8A8",
                              "borderRadius": 30,
                              "borderWidth": 1.5,
                              "flexDirection": "row",
                              "height": 45,
                              "justifyContent": "space-between",
                              "paddingBottom": 8,
                              "paddingLeft": 16,
                              "paddingRight": 16,
                              "paddingTop": 8,
                            },
                          ]
                        }
                      >
                        <View
                          style={
                            Array [
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "#FFFFFF",
                                "borderColor": "#A8A8A8",
                                "borderRadius": 30,
                                "borderWidth": 1.5,
                                "flexDirection": "row",
                                "height": 45,
                                "justifyContent": "space-between",
                                "paddingBottom": 8,
                                "paddingLeft": 16,
                                "paddingRight": 16,
                                "paddingTop": 8,
                              },
                            ]
                          }
                        >
                          <Styled(TextInput)
                            autoCapitalize="none"
                            autoCorrect={false}
                            icon={
                              <ForwardRef
                                onPress={[Function]}
                                touchSlop={
                                  Object {
                                    "bottom": 5,
                                    "left": 5,
                                    "right": 5,
                                    "top": 5,
                                  }
                                }
                              >
                                <Icon
                                  allowFontScaling={false}
                                  color="#4F4F4F"
                                  name="eye"
                                  size={20}
                                  style={
                                    Object {
                                      "marginRight": 2,
                                      "marginTop": 2,
                                    }
                                  }
                                />
                              </ForwardRef>
                            }
                            placeholder="Password"
                            secureTextEntry={true}
                          >
                            <StyledNativeComponent
                              autoCapitalize="none"
                              autoCorrect={false}
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "State": Object {
                                    "blurTextInput": [Function],
                                    "currentlyFocusedField": [Function],
                                    "focusTextInput": [Function],
                                  },
                                  "attrs": Array [],
                                  "displayName": "Styled(TextInput)",
                                  "getDefaultProps": [Function],
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  width: ",
                                      [Function],
                                      ";
  font-size: 14px;
  font-family: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              icon={
                                <ForwardRef
                                  onPress={[Function]}
                                  touchSlop={
                                    Object {
                                      "bottom": 5,
                                      "left": 5,
                                      "right": 5,
                                      "top": 5,
                                    }
                                  }
                                >
                                  <Icon
                                    allowFontScaling={false}
                                    color="#4F4F4F"
                                    name="eye"
                                    size={20}
                                    style={
                                      Object {
                                        "marginRight": 2,
                                        "marginTop": 2,
                                      }
                                    }
                                  />
                                </ForwardRef>
                              }
                              placeholder="Password"
                              secureTextEntry={true}
                            >
                              <TextInput
                                allowFontScaling={true}
                                autoCapitalize="none"
                                autoCorrect={false}
                                icon={
                                  <ForwardRef
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <Icon
                                      allowFontScaling={false}
                                      color="#4F4F4F"
                                      name="eye"
                                      size={20}
                                      style={
                                        Object {
                                          "marginRight": 2,
                                          "marginTop": 2,
                                        }
                                      }
                                    />
                                  </ForwardRef>
                                }
                                placeholder="Password"
                                secureTextEntry={true}
                                style={
                                  Array [
                                    Object {
                                      "color": "#333333",
                                      "fontFamily": "Avenir-Medium",
                                      "fontSize": 14,
                                      "width": "90%",
                                    },
                                  ]
                                }
                                underlineColorAndroid="transparent"
                              >
                                <TextInput
                                  allowFontScaling={true}
                                  autoCapitalize="none"
                                  autoCorrect={false}
                                  icon={
                                    <ForwardRef
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <Icon
                                        allowFontScaling={false}
                                        color="#4F4F4F"
                                        name="eye"
                                        size={20}
                                        style={
                                          Object {
                                            "marginRight": 2,
                                            "marginTop": 2,
                                          }
                                        }
                                      />
                                    </ForwardRef>
                                  }
                                  placeholder="Password"
                                  secureTextEntry={true}
                                  style={
                                    Array [
                                      Object {
                                        "color": "#333333",
                                        "fontFamily": "Avenir-Medium",
                                        "fontSize": 14,
                                        "width": "90%",
                                      },
                                    ]
                                  }
                                  underlineColorAndroid="transparent"
                                />
                              </TextInput>
                            </StyledNativeComponent>
                          </Styled(TextInput)>
                          <Styled(View)>
                            <StyledNativeComponent
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "displayName": "Styled(View)",
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  align-items: center;
  justify-content: center;
  padding-bottom: 1.5px;
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "justifyContent": "center",
                                      "paddingBottom": 1.5,
                                    },
                                  ]
                                }
                              >
                                <View
                                  style={
                                    Array [
                                      Object {
                                        "alignItems": "center",
                                        "justifyContent": "center",
                                        "paddingBottom": 1.5,
                                      },
                                    ]
                                  }
                                >
                                  <SecurityToggle
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <StyledNativeComponent
                                      forwardedClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "displayName": "SecurityToggle",
                                          "getDefaultProps": [Function],
                                          "inlineStyle": InlineStyle {
                                            "rules": Array [],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "StyledNativeComponent",
                                          "target": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <TouchableOpacity
                                        activeOpacity={0.2}
                                        onPress={[Function]}
                                        style={
                                          Array [
                                            Object {},
                                          ]
                                        }
                                        touchSlop={
                                          Object {
                                            "bottom": 5,
                                            "left": 5,
                                            "right": 5,
                                            "top": 5,
                                          }
                                        }
                                      >
                                        <AnimatedComponent
                                          accessible={true}
                                          isTVSelectable={true}
                                          onResponderGrant={[Function]}
                                          onResponderMove={[Function]}
                                          onResponderRelease={[Function]}
                                          onResponderTerminate={[Function]}
                                          onResponderTerminationRequest={[Function]}
                                          onStartShouldSetResponder={[Function]}
                                          style={
                                            Array [
                                              Array [
                                                Object {},
                                              ],
                                              Object {
                                                "opacity": 1,
                                              },
                                            ]
                                          }
                                        >
                                          <View
                                            accessible={true}
                                            isTVSelectable={true}
                                            onResponderGrant={[Function]}
                                            onResponderMove={[Function]}
                                            onResponderRelease={[Function]}
                                            onResponderTerminate={[Function]}
                                            onResponderTerminationRequest={[Function]}
                                            onStartShouldSetResponder={[Function]}
                                            style={
                                              Object {
                                                "opacity": 1,
                                              }
                                            }
                                          >
                                            <View
                                              accessible={true}
                                              isTVSelectable={true}
                                              onResponderGrant={[Function]}
                                              onResponderMove={[Function]}
                                              onResponderRelease={[Function]}
                                              onResponderTerminate={[Function]}
                                              onResponderTerminationRequest={[Function]}
                                              onStartShouldSetResponder={[Function]}
                                              style={
                                                Object {
                                                  "opacity": 1,
                                                }
                                              }
                                            >
                                              <Icon
                                                allowFontScaling={false}
                                                color="#4F4F4F"
                                                name="eye"
                                                size={20}
                                                style={
                                                  Object {
                                                    "marginRight": 2,
                                                    "marginTop": 2,
                                                  }
                                                }
                                              >
                                                <Text
                                                  allowFontScaling={false}
                                                  style={
                                                    Array [
                                                      Object {
                                                        "color": "#4F4F4F",
                                                        "fontSize": 20,
                                                      },
                                                      Object {
                                                        "marginRight": 2,
                                                        "marginTop": 2,
                                                      },
                                                      Object {
                                                        "fontFamily": "Entypo",
                                                        "fontStyle": "normal",
                                                        "fontWeight": "normal",
                                                      },
                                                      Object {},
                                                    ]
                                                  }
                                                >
                                                  <Text
                                                    allowFontScaling={false}
                                                    style={
                                                      Array [
                                                        Object {
                                                          "color": "#4F4F4F",
                                                          "fontSize": 20,
                                                        },
                                                        Object {
                                                          "marginRight": 2,
                                                          "marginTop": 2,
                                                        },
                                                        Object {
                                                          "fontFamily": "Entypo",
                                                          "fontStyle": "normal",
                                                          "fontWeight": "normal",
                                                        },
                                                        Object {},
                                                      ]
                                                    }
                                                  >
                                                    
                                                  </Text>
                                                </Text>
                                              </Icon>
                                            </View>
                                          </View>
                                        </AnimatedComponent>
                                      </TouchableOpacity>
                                    </StyledNativeComponent>
                                  </SecurityToggle>
                                </View>
                              </View>
                            </StyledNativeComponent>
                          </Styled(View)>
                        </View>
                      </View>
                    </StyledNativeComponent>
                  </RoundContainer>
                  <Styled(Text)>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "Styled(Text)",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  margin-top: 5px;
  margin-left: 10px;
  color: ",
                              [Function],
                              ";
  font-family: ",
                              [Function],
                              ";
  font-size: 13px;
  line-height: 18px;
",
                            ],
                          },
                          "propTypes": Object {
                            "accessible": [Function],
                            "adjustsFontSizeToFit": [Function],
                            "allowFontScaling": [Function],
                            "disabled": [Function],
                            "ellipsizeMode": [Function],
                            "minimumFontScale": [Function],
                            "nativeID": [Function],
                            "numberOfLines": [Function],
                            "onLayout": [Function],
                            "onLongPress": [Function],
                            "onPress": [Function],
                            "pressRetentionOffset": [Function],
                            "selectable": [Function],
                            "selectionColor": [Function],
                            "style": [Function],
                            "suppressHighlighting": [Function],
                            "testID": [Function],
                            "textBreakStrategy": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <Text
                        style={
                          Array [
                            Object {
                              "color": "#DA2752",
                              "fontFamily": "Avenir-Heavy",
                              "fontSize": 13,
                              "lineHeight": 18,
                              "marginLeft": 10,
                              "marginTop": 5,
                            },
                          ]
                        }
                      >
                        <Text
                          style={
                            Array [
                              Object {
                                "color": "#DA2752",
                                "fontFamily": "Avenir-Heavy",
                                "fontSize": 13,
                                "lineHeight": 18,
                                "marginLeft": 10,
                                "marginTop": 5,
                              },
                            ]
                          }
                        />
                      </Text>
                    </StyledNativeComponent>
                  </Styled(Text)>
                </View>
              </View>
            </AnimatedComponent>
          </TouchableOpacity>
        </StyledNativeComponent>
      </Styled(TouchableOpacity)>
    </PrimaryInput>
  </PasswordInput>
</ThemeProvider>
`;

exports[`PasswordInput renders correctly 3`] = `
<ThemeProvider
  autoFocus={true}
  error="error"
  placeholder="placeholder"
  returnKeyType="done"
  theme={
    Object {
      "colors": Object {
        "black": "#4F4F4F",
        "border": "#BDBDBD",
        "buttonShadow1": "rgba(255, 255, 255, 0) ",
        "buttonShadow2": "rgba(249, 249, 249, 0.9)",
        "charcoal": "#333333",
        "darkGrey": "#8F8F8F",
        "darkShadow": "rgba(0,0,0,0.1)",
        "darkerGrey": "#828282",
        "error": "#DA2752",
        "gradientLeft": "#DA2752",
        "gradientRight": "#E935F8",
        "green": "#219653",
        "grey": "#A8A8A8",
        "inactiveText": "#ADADAD",
        "lightGrey": "#A0A0A0",
        "lightShadow": "rgba(0,0,0,0.16)",
        "offWhite": "#F9F9F9",
        "pureBlack": "#000000",
        "shadow": "rgba(0, 0, 0, 0.15)",
        "white": "#FFFFFF",
        "whiteGrey": "#E0E0E0",
      },
      "fonts": Object {
        "bodyText": "Avenir-Medium",
        "heading": "Montserrat-Bold",
        "title": "Avenir-Heavy",
      },
    }
  }
>
  <PasswordInput>
    <PrimaryInput
      icon={
        <ForwardRef
          onPress={[Function]}
          touchSlop={
            Object {
              "bottom": 5,
              "left": 5,
              "right": 5,
              "top": 5,
            }
          }
        >
          <Icon
            allowFontScaling={false}
            color="#4F4F4F"
            name="eye"
            size={20}
            style={
              Object {
                "marginRight": 2,
                "marginTop": 2,
              }
            }
          />
        </ForwardRef>
      }
      placeholder="Password"
      secureTextEntry={true}
    >
      <Styled(TouchableOpacity)
        activeOpacity={1}
        onPress={[Function]}
      >
        <StyledNativeComponent
          activeOpacity={1}
          forwardedClass={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "displayName": "Styled(TouchableOpacity)",
              "getDefaultProps": [Function],
              "inlineStyle": InlineStyle {
                "rules": Array [
                  "
  margin-left: 32px;
  margin-right: 32px;
  padding-top: 8px;
",
                ],
              },
              "render": [Function],
              "styledComponentId": "StyledNativeComponent",
              "target": [Function],
              "withComponent": [Function],
              Symbol(Symbol.hasInstance): [Function],
            }
          }
          forwardedRef={null}
          onPress={[Function]}
        >
          <TouchableOpacity
            activeOpacity={1}
            onPress={[Function]}
            style={
              Array [
                Object {
                  "marginLeft": 32,
                  "marginRight": 32,
                  "paddingTop": 8,
                },
              ]
            }
          >
            <AnimatedComponent
              accessible={true}
              isTVSelectable={true}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Array [
                  Array [
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "paddingTop": 8,
                    },
                  ],
                  Object {
                    "opacity": 1,
                  },
                ]
              }
            >
              <View
                accessible={true}
                isTVSelectable={true}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "marginLeft": 32,
                    "marginRight": 32,
                    "opacity": 1,
                    "paddingTop": 8,
                  }
                }
              >
                <View
                  accessible={true}
                  isTVSelectable={true}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "marginLeft": 32,
                      "marginRight": 32,
                      "opacity": 1,
                      "paddingTop": 8,
                    }
                  }
                >
                  <RoundContainer>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "RoundContainer",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  border-width: ",
                              [Function],
                              ";
  height: 45px;
  border-radius: 30px;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  padding: ",
                              "8px 16px 8px 16px",
                              ";
  border-color: ",
                              [Function],
                              ";
  background-color: ",
                              [Function],
                              ";
",
                            ],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <View
                        style={
                          Array [
                            Object {
                              "alignItems": "center",
                              "backgroundColor": "#FFFFFF",
                              "borderColor": "#A8A8A8",
                              "borderRadius": 30,
                              "borderWidth": 1.5,
                              "flexDirection": "row",
                              "height": 45,
                              "justifyContent": "space-between",
                              "paddingBottom": 8,
                              "paddingLeft": 16,
                              "paddingRight": 16,
                              "paddingTop": 8,
                            },
                          ]
                        }
                      >
                        <View
                          style={
                            Array [
                              Object {
                                "alignItems": "center",
                                "backgroundColor": "#FFFFFF",
                                "borderColor": "#A8A8A8",
                                "borderRadius": 30,
                                "borderWidth": 1.5,
                                "flexDirection": "row",
                                "height": 45,
                                "justifyContent": "space-between",
                                "paddingBottom": 8,
                                "paddingLeft": 16,
                                "paddingRight": 16,
                                "paddingTop": 8,
                              },
                            ]
                          }
                        >
                          <Styled(TextInput)
                            autoCapitalize="none"
                            autoCorrect={false}
                            icon={
                              <ForwardRef
                                onPress={[Function]}
                                touchSlop={
                                  Object {
                                    "bottom": 5,
                                    "left": 5,
                                    "right": 5,
                                    "top": 5,
                                  }
                                }
                              >
                                <Icon
                                  allowFontScaling={false}
                                  color="#4F4F4F"
                                  name="eye"
                                  size={20}
                                  style={
                                    Object {
                                      "marginRight": 2,
                                      "marginTop": 2,
                                    }
                                  }
                                />
                              </ForwardRef>
                            }
                            placeholder="Password"
                            secureTextEntry={true}
                          >
                            <StyledNativeComponent
                              autoCapitalize="none"
                              autoCorrect={false}
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "State": Object {
                                    "blurTextInput": [Function],
                                    "currentlyFocusedField": [Function],
                                    "focusTextInput": [Function],
                                  },
                                  "attrs": Array [],
                                  "displayName": "Styled(TextInput)",
                                  "getDefaultProps": [Function],
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  width: ",
                                      [Function],
                                      ";
  font-size: 14px;
  font-family: ",
                                      [Function],
                                      ";
  color: ",
                                      [Function],
                                      ";
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={[Function]}
                              icon={
                                <ForwardRef
                                  onPress={[Function]}
                                  touchSlop={
                                    Object {
                                      "bottom": 5,
                                      "left": 5,
                                      "right": 5,
                                      "top": 5,
                                    }
                                  }
                                >
                                  <Icon
                                    allowFontScaling={false}
                                    color="#4F4F4F"
                                    name="eye"
                                    size={20}
                                    style={
                                      Object {
                                        "marginRight": 2,
                                        "marginTop": 2,
                                      }
                                    }
                                  />
                                </ForwardRef>
                              }
                              placeholder="Password"
                              secureTextEntry={true}
                            >
                              <TextInput
                                allowFontScaling={true}
                                autoCapitalize="none"
                                autoCorrect={false}
                                icon={
                                  <ForwardRef
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <Icon
                                      allowFontScaling={false}
                                      color="#4F4F4F"
                                      name="eye"
                                      size={20}
                                      style={
                                        Object {
                                          "marginRight": 2,
                                          "marginTop": 2,
                                        }
                                      }
                                    />
                                  </ForwardRef>
                                }
                                placeholder="Password"
                                secureTextEntry={true}
                                style={
                                  Array [
                                    Object {
                                      "color": "#333333",
                                      "fontFamily": "Avenir-Medium",
                                      "fontSize": 14,
                                      "width": "90%",
                                    },
                                  ]
                                }
                                underlineColorAndroid="transparent"
                              >
                                <TextInput
                                  allowFontScaling={true}
                                  autoCapitalize="none"
                                  autoCorrect={false}
                                  icon={
                                    <ForwardRef
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <Icon
                                        allowFontScaling={false}
                                        color="#4F4F4F"
                                        name="eye"
                                        size={20}
                                        style={
                                          Object {
                                            "marginRight": 2,
                                            "marginTop": 2,
                                          }
                                        }
                                      />
                                    </ForwardRef>
                                  }
                                  placeholder="Password"
                                  secureTextEntry={true}
                                  style={
                                    Array [
                                      Object {
                                        "color": "#333333",
                                        "fontFamily": "Avenir-Medium",
                                        "fontSize": 14,
                                        "width": "90%",
                                      },
                                    ]
                                  }
                                  underlineColorAndroid="transparent"
                                />
                              </TextInput>
                            </StyledNativeComponent>
                          </Styled(TextInput)>
                          <Styled(View)>
                            <StyledNativeComponent
                              forwardedClass={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "attrs": Array [],
                                  "displayName": "Styled(View)",
                                  "inlineStyle": InlineStyle {
                                    "rules": Array [
                                      "
  align-items: center;
  justify-content: center;
  padding-bottom: 1.5px;
",
                                    ],
                                  },
                                  "render": [Function],
                                  "styledComponentId": "StyledNativeComponent",
                                  "target": [Function],
                                  "withComponent": [Function],
                                  Symbol(Symbol.hasInstance): [Function],
                                }
                              }
                              forwardedRef={null}
                            >
                              <View
                                style={
                                  Array [
                                    Object {
                                      "alignItems": "center",
                                      "justifyContent": "center",
                                      "paddingBottom": 1.5,
                                    },
                                  ]
                                }
                              >
                                <View
                                  style={
                                    Array [
                                      Object {
                                        "alignItems": "center",
                                        "justifyContent": "center",
                                        "paddingBottom": 1.5,
                                      },
                                    ]
                                  }
                                >
                                  <SecurityToggle
                                    onPress={[Function]}
                                    touchSlop={
                                      Object {
                                        "bottom": 5,
                                        "left": 5,
                                        "right": 5,
                                        "top": 5,
                                      }
                                    }
                                  >
                                    <StyledNativeComponent
                                      forwardedClass={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "displayName": "SecurityToggle",
                                          "getDefaultProps": [Function],
                                          "inlineStyle": InlineStyle {
                                            "rules": Array [],
                                          },
                                          "render": [Function],
                                          "styledComponentId": "StyledNativeComponent",
                                          "target": [Function],
                                          "withComponent": [Function],
                                          Symbol(Symbol.hasInstance): [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                      onPress={[Function]}
                                      touchSlop={
                                        Object {
                                          "bottom": 5,
                                          "left": 5,
                                          "right": 5,
                                          "top": 5,
                                        }
                                      }
                                    >
                                      <TouchableOpacity
                                        activeOpacity={0.2}
                                        onPress={[Function]}
                                        style={
                                          Array [
                                            Object {},
                                          ]
                                        }
                                        touchSlop={
                                          Object {
                                            "bottom": 5,
                                            "left": 5,
                                            "right": 5,
                                            "top": 5,
                                          }
                                        }
                                      >
                                        <AnimatedComponent
                                          accessible={true}
                                          isTVSelectable={true}
                                          onResponderGrant={[Function]}
                                          onResponderMove={[Function]}
                                          onResponderRelease={[Function]}
                                          onResponderTerminate={[Function]}
                                          onResponderTerminationRequest={[Function]}
                                          onStartShouldSetResponder={[Function]}
                                          style={
                                            Array [
                                              Array [
                                                Object {},
                                              ],
                                              Object {
                                                "opacity": 1,
                                              },
                                            ]
                                          }
                                        >
                                          <View
                                            accessible={true}
                                            isTVSelectable={true}
                                            onResponderGrant={[Function]}
                                            onResponderMove={[Function]}
                                            onResponderRelease={[Function]}
                                            onResponderTerminate={[Function]}
                                            onResponderTerminationRequest={[Function]}
                                            onStartShouldSetResponder={[Function]}
                                            style={
                                              Object {
                                                "opacity": 1,
                                              }
                                            }
                                          >
                                            <View
                                              accessible={true}
                                              isTVSelectable={true}
                                              onResponderGrant={[Function]}
                                              onResponderMove={[Function]}
                                              onResponderRelease={[Function]}
                                              onResponderTerminate={[Function]}
                                              onResponderTerminationRequest={[Function]}
                                              onStartShouldSetResponder={[Function]}
                                              style={
                                                Object {
                                                  "opacity": 1,
                                                }
                                              }
                                            >
                                              <Icon
                                                allowFontScaling={false}
                                                color="#4F4F4F"
                                                name="eye"
                                                size={20}
                                                style={
                                                  Object {
                                                    "marginRight": 2,
                                                    "marginTop": 2,
                                                  }
                                                }
                                              >
                                                <Text
                                                  allowFontScaling={false}
                                                  style={
                                                    Array [
                                                      Object {
                                                        "color": "#4F4F4F",
                                                        "fontSize": 20,
                                                      },
                                                      Object {
                                                        "marginRight": 2,
                                                        "marginTop": 2,
                                                      },
                                                      Object {
                                                        "fontFamily": "Entypo",
                                                        "fontStyle": "normal",
                                                        "fontWeight": "normal",
                                                      },
                                                      Object {},
                                                    ]
                                                  }
                                                >
                                                  <Text
                                                    allowFontScaling={false}
                                                    style={
                                                      Array [
                                                        Object {
                                                          "color": "#4F4F4F",
                                                          "fontSize": 20,
                                                        },
                                                        Object {
                                                          "marginRight": 2,
                                                          "marginTop": 2,
                                                        },
                                                        Object {
                                                          "fontFamily": "Entypo",
                                                          "fontStyle": "normal",
                                                          "fontWeight": "normal",
                                                        },
                                                        Object {},
                                                      ]
                                                    }
                                                  >
                                                    
                                                  </Text>
                                                </Text>
                                              </Icon>
                                            </View>
                                          </View>
                                        </AnimatedComponent>
                                      </TouchableOpacity>
                                    </StyledNativeComponent>
                                  </SecurityToggle>
                                </View>
                              </View>
                            </StyledNativeComponent>
                          </Styled(View)>
                        </View>
                      </View>
                    </StyledNativeComponent>
                  </RoundContainer>
                  <Styled(Text)>
                    <StyledNativeComponent
                      forwardedClass={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "displayName": "Styled(Text)",
                          "inlineStyle": InlineStyle {
                            "rules": Array [
                              "
  margin-top: 5px;
  margin-left: 10px;
  color: ",
                              [Function],
                              ";
  font-family: ",
                              [Function],
                              ";
  font-size: 13px;
  line-height: 18px;
",
                            ],
                          },
                          "propTypes": Object {
                            "accessible": [Function],
                            "adjustsFontSizeToFit": [Function],
                            "allowFontScaling": [Function],
                            "disabled": [Function],
                            "ellipsizeMode": [Function],
                            "minimumFontScale": [Function],
                            "nativeID": [Function],
                            "numberOfLines": [Function],
                            "onLayout": [Function],
                            "onLongPress": [Function],
                            "onPress": [Function],
                            "pressRetentionOffset": [Function],
                            "selectable": [Function],
                            "selectionColor": [Function],
                            "style": [Function],
                            "suppressHighlighting": [Function],
                            "testID": [Function],
                            "textBreakStrategy": [Function],
                          },
                          "render": [Function],
                          "styledComponentId": "StyledNativeComponent",
                          "target": [Function],
                          "withComponent": [Function],
                          Symbol(Symbol.hasInstance): [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <Text
                        style={
                          Array [
                            Object {
                              "color": "#DA2752",
                              "fontFamily": "Avenir-Heavy",
                              "fontSize": 13,
                              "lineHeight": 18,
                              "marginLeft": 10,
                              "marginTop": 5,
                            },
                          ]
                        }
                      >
                        <Text
                          style={
                            Array [
                              Object {
                                "color": "#DA2752",
                                "fontFamily": "Avenir-Heavy",
                                "fontSize": 13,
                                "lineHeight": 18,
                                "marginLeft": 10,
                                "marginTop": 5,
                              },
                            ]
                          }
                        />
                      </Text>
                    </StyledNativeComponent>
                  </Styled(Text)>
                </View>
              </View>
            </AnimatedComponent>
          </TouchableOpacity>
        </StyledNativeComponent>
      </Styled(TouchableOpacity)>
    </PrimaryInput>
  </PasswordInput>
</ThemeProvider>
`;
